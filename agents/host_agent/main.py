from fastapi import FastAPI, Request, HTTPException
import os
import requests
import asyncio
from typing import Dict, Any, Optional
import json
from datetime import datetime
import uvicorn
from dotenv import load_dotenv

# Import Host Agent t·ª´ file c·ªßa b·∫°n
from agent import HostRuntime, shared_memory

load_dotenv()

app = FastAPI(title="Ohana Facebook Bot API", version="1.0.0")

# Facebook configuration
VERIFY_TOKEN = os.getenv("FB_VERIFY_TOKEN", "ohana_verify_token_2025")
PAGE_ACCESS_TOKEN = os.getenv("FB_PAGE_ACCESS_TOKEN", "")

# Ki·ªÉm tra config
if not PAGE_ACCESS_TOKEN:
    print("WARNING: FB_PAGE_ACCESS_TOKEN not set!")

# Kh·ªüi t·∫°o Host Agent
host_runtime = HostRuntime()

# L∆∞u tr·ªØ sessions cho t·ª´ng Facebook user
user_sessions = {}

def get_user_session(fb_user_id: str) -> str:
    """T·∫°o ho·∫∑c l·∫•y session cho Facebook user"""
    if fb_user_id not in user_sessions:
        user_sessions[fb_user_id] = f"fb-user-{fb_user_id}"
    return user_sessions[fb_user_id]

@app.get("/")
async def root():
    """API status endpoint"""
    return {
        "message": "Ohana Facebook Bot API", 
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "host_agent": "connected",
        "facebook_integration": "active"
    }

@app.get("/webhook")
async def verify_webhook(request: Request):
    """Facebook webhook verification endpoint"""
    try:
        # L·∫•y parameters t·ª´ Facebook
        verify_token = request.query_params.get('hub.verify_token')
        challenge = request.query_params.get('hub.challenge')
        
        print(f"üîç Webhook verification request:")
        print(f"   Token received: {verify_token}")
        print(f"   Expected token: {VERIFY_TOKEN}")
        print(f"   Challenge: {challenge}")
        
        # Verify token
        if verify_token == VERIFY_TOKEN:
            print("‚úÖ Webhook verification successful!")
            return int(challenge)
        else:
            print("‚ùå Invalid verification token")
            raise HTTPException(status_code=403, detail="Invalid verify token")
            
    except Exception as e:
        print(f"‚ùå Webhook verification error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/webhook")
async def receive_message(request: Request):
    """Nh·∫≠n v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Facebook Messenger"""
    try:
        # Parse Facebook webhook data
        data = await request.json()
        print(f"üì® Received Facebook webhook:")
        print(json.dumps(data, indent=2, ensure_ascii=False))
        
        # X·ª≠ l√Ω t·ª´ng entry trong webhook
        for entry in data.get('entry', []):
            for messaging in entry.get('messaging', []):
                await process_messaging_event(messaging)
        
        return {"status": "EVENT_RECEIVED"}
        
    except Exception as e:
        print(f"‚ùå Error processing webhook: {e}")
        return {"status": "ERROR", "message": str(e)}

async def process_messaging_event(messaging: Dict[str, Any]):
    """X·ª≠ l√Ω m·ªôt messaging event t·ª´ Facebook"""
    try:
        sender_id = messaging.get('sender', {}).get('id')
        
        if not sender_id:
            print("‚ö†Ô∏è No sender ID found in messaging event")
            return
        
        # X·ª≠ l√Ω tin nh·∫Øn text
        if 'message' in messaging:
            message = messaging['message']
            message_text = message.get('text', '').strip()
            
            if message_text:
                print(f"üë§ User {sender_id}: {message_text}")
                
                # G·ªçi Host Agent ƒë·ªÉ x·ª≠ l√Ω
                response = await process_with_host_agent(message_text, sender_id)
                
                if response:
                    # G·ª≠i ph·∫£n h·ªìi v·ªÅ Facebook
                    await send_facebook_message(sender_id, response)
                else:
                    await send_facebook_message(sender_id, "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n.")
        
        # X·ª≠ l√Ω postback (button clicks)
        elif 'postback' in messaging:
            postback = messaging['postback']
            payload = postback.get('payload', '')
            print(f"üîò User {sender_id} clicked: {payload}")
            
            # X·ª≠ l√Ω postback nh∆∞ tin nh·∫Øn text
            response = await process_with_host_agent(payload, sender_id)
            if response:
                await send_facebook_message(sender_id, response)
        
    except Exception as e:
        print(f"‚ùå Error processing messaging event: {e}")

async def process_with_host_agent(message: str, fb_user_id: str) -> Optional[str]:
    """X·ª≠ l√Ω tin nh·∫Øn qua Host Agent v·ªõi session management"""
    try:
        # L·∫•y session cho user n√†y
        session_id = get_user_session(fb_user_id)
        
        print(f"ü§ñ Processing via Host Agent:")
        print(f"   Message: {message}")
        print(f"   FB User: {fb_user_id}")
        print(f"   Session: {session_id}")
        
        # Auto-detect session reset cho user n√†y
        shared_memory.get_or_create_session(message)
        
        # G·ªçi Host Agent ƒë·ªÉ x·ª≠ l√Ω
        response = await host_runtime.ask(message, session_id=session_id)
        
        print(f"ü§ñ Host Agent response: {response}")
        
        return response
        
    except Exception as e:
        print(f"‚ùå Error calling Host Agent: {e}")
        return f"Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t."

async def send_facebook_message(recipient_id: str, message_text: str):
    """G·ª≠i tin nh·∫Øn v·ªÅ Facebook Messenger"""
    if not PAGE_ACCESS_TOKEN:
        print("‚ùå Cannot send message: PAGE_ACCESS_TOKEN not configured")
        return
    
    url = "https://graph.facebook.com/v18.0/me/messages"
    
    # Chia tin nh·∫Øn d√†i th√†nh nhi·ªÅu ph·∫ßn (Facebook limit ~2000 chars)
    max_length = 1900
    messages = []
    
    if len(message_text) <= max_length:
        messages = [message_text]
    else:
        # Chia theo d√≤ng ƒë·ªÉ gi·ªØ format
        lines = message_text.split('\n')
        current_msg = ""
        
        for line in lines:
            if len(current_msg + line + '\n') <= max_length:
                current_msg += line + '\n'
            else:
                if current_msg:
                    messages.append(current_msg.strip())
                current_msg = line + '\n'
        
        if current_msg:
            messages.append(current_msg.strip())
    
    # G·ª≠i t·ª´ng tin nh·∫Øn
    for i, msg in enumerate(messages):
        try:
            payload = {
                "recipient": {"id": recipient_id},
                "message": {"text": msg}
            }
            
            headers = {
                "Authorization": f"Bearer {PAGE_ACCESS_TOKEN}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=10)
            
            if response.status_code == 200:
                print(f"üì§ Sent message {i+1}/{len(messages)} to Facebook: {msg[:50]}...")
            else:
                print(f"‚ùå Facebook API error: {response.status_code}")
                print(f"   Response: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Error sending message {i+1} to Facebook: {e}")

@app.get("/health")
async def health_check():
    """Health check v·ªõi th√¥ng tin chi ti·∫øt"""
    try:
        # Check Host Agent
        host_status = "connected"
        
        # Check shared memory
        memory_stats = shared_memory.get_session_stats() if shared_memory.current_session else {}
        
        # Check sub agents (n·∫øu c√≥ th·ªÉ)
        sub_agents_status = {
            "booking_agent": "unknown",  # C√≥ th·ªÉ ping BOOKING_URL
            "info_agent": "unknown"      # C√≥ th·ªÉ ping INFO_URL  
        }
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "host_agent": host_status,
            "shared_memory": memory_stats,
            "sub_agents": sub_agents_status,
            "active_sessions": len(user_sessions),
            "facebook_config": {
                "verify_token": "configured" if VERIFY_TOKEN else "missing",
                "page_token": "configured" if PAGE_ACCESS_TOKEN else "missing"
            }
        }
        
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.post("/test-chat")
async def test_chat(request: Request):
    """Test endpoint ƒë·ªÉ th·ª≠ nghi·ªám kh√¥ng qua Facebook"""
    try:
        data = await request.json()
        message = data.get("message", "")
        user_id = data.get("user_id", "test-user")
        
        if not message:
            raise HTTPException(status_code=400, detail="Message is required")
        
        print(f"üß™ Test chat request: {message}")
        
        response = await process_with_host_agent(message, user_id)
        
        return {
            "user_message": message,
            "bot_response": response,
            "session_id": get_user_session(user_id),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/reset-session/{user_id}")
async def reset_user_session(user_id: str):
    """Reset session cho m·ªôt user c·ª• th·ªÉ"""
    try:
        if user_id in user_sessions:
            del user_sessions[user_id]
        
        # Reset shared memory n·∫øu c·∫ßn
        shared_memory.start_new_conversation()
        
        return {
            "message": f"Session reset for user {user_id}",
            "new_session": get_user_session(user_id)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    print("üöÄ Starting Ohana Facebook Bot API...")
    print(f"   Verify Token: {'‚úÖ Set' if VERIFY_TOKEN else '‚ùå Missing'}")
    print(f"   Page Token: {'‚úÖ Set' if PAGE_ACCESS_TOKEN else '‚ùå Missing'}")
    
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)